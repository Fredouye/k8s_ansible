- name: Gets a list of clusters
  uri:
    url: 'https://{{ rancher_url }}/v3/clusters'
    headers:
      Authorization: 'Bearer {{ api_token }}'
  register: clusters_list

- name: Searches for {{ k8s_cluster_name }} cluster
  set_fact:
    existing_cluster: '{{ clusters_list.json.data | json_query(my_query) }}'
  vars:
    my_query: "[? name=='{{ k8s_cluster_name }}'].id"

- name: Exits if cluster already present
  fail:
    msg: 'Cluster {{ k8s_cluster_name }} already present !'
  when: existing_cluster | length > 0
  
  - name: Adds cluster
  uri:
    url: 'https://{{ rancher_url }}/v3/cluster'
    method: POST
    body_format: json
    body: "{
      'type': 'cluster',
      'name': '{{ k8s_cluster_name }}',
      'description': 'Cluster {{ k8s_cluster_name }}'
    }"
    headers:
      Authorization: 'Bearer {{ api_token }}'
    status_code: 201
  register: cluster_creation

- name: Extracts cluster ID
  set_fact:
    cluster_id: '{{ cluster_creation.json.id }}'
    
- name: Generates cluster token
  uri:
    url: 'https://{{ rancher_url }}/v3/clusters/{{ cluster_id }}/clusterregistrationtoken'
    method: POST
    body_format: json
    body:
     type: clusterRegistrationToken
     clusterId: '{{ cluster_id }}'
    headers:
      Authorization: 'Bearer {{ api_token }}'
    status_code: 201
  register: cluster_token

- name: Extracts token ID
  set_fact:
    token_id: '{{ cluster_token.json.id }}'

- name: Gets registration command
  uri:
    url: 'https://{{ rancher_url }}/v3/clusters/{{ cluster_id }}/clusterregistrationtoken/{{ token_id }}'
    method: GET
    body_format: json
    headers:
      Authorization: 'Bearer {{ api_token }}'
    return_content: true
  register: registration

- name: Runs import
  shell: '{{ registration.json.command }}'
  delegate_to: '{{ first_node }}'
  environment:
    KUBECONFIG: /root/.kube/kubeconfig
